#include <iostream>
#include "NetworkServer.h"
#include "NetworkClient.h"

#include <allegro5/allegro.h>
#include <allegro5/allegro_native_dialog.h>

#include <allegro5/allegro_primitives.h>
#include <allegro5/allegro_font.h>
#include <allegro5/allegro_ttf.h>
#include <allegro5/allegro_image.h>

#include <string>
#include <Windows.h>

using namespace std;

#include <list>

#include "balas.h"
#include "player.h"
#include "mapClass.h"
#include "WRdataClass.h"

//Inicializadores
//DECLARACION DE TYPES PRINCIPALES
ALLEGRO_TIMER* segundoTimer;
ALLEGRO_EVENT_QUEUE* event_queue;
ALLEGRO_TIMER* FPS;

ALLEGRO_FONT* dirt_chunk;
ALLEGRO_DISPLAY* ventana;
ALLEGRO_EVENT Evento;
ALLEGRO_KEYBOARD_STATE teclado;


//DISPLAY DE VENTANA
int ancho = 1080;
int alto = 720;
int ancho_W = GetSystemMetrics(SM_CXSCREEN);
int alto_W = GetSystemMetrics(SM_CYSCREEN);



//VARIABLES PRINCIPALES
ALLEGRO_COLOR colorblanco = al_map_rgb(255, 255, 255);
ALLEGRO_COLOR colorazar = al_map_rgb(155, 55, 25);
int segundo = 1000;
int countFPS = 0;
int x = -1, y = -1;
int boolbuttons[] = { 0,0,0,0 };

//Funciones a llamar
int menu_game();
void CreateObj();


int main() {

	if (!al_init()) {
		al_show_native_message_box(NULL, "ERROR CRITICO", "ERROR: en 4 como tu vieja", "solo tenias que seguir el maldito tren CJ", NULL, ALLEGRO_MESSAGEBOX_YES_NO);
		return -1;
	}

	//INIT DE METODOS
	al_init_font_addon();
	al_init_ttf_addon();
	al_init_primitives_addon();
	al_install_mouse();
	al_install_keyboard();
	al_init_image_addon();

	ventana = al_create_display(ancho, alto);
	al_set_window_title(ventana, "aaaa xd");
	al_set_window_position(ventana, ancho_W / 2 - ancho / 2, alto_W / 2 - alto / 2);

	//TYPES PRINCIPALES
	segundoTimer = al_create_timer(1.0);
	FPS = al_create_timer(1.0 / 30);
	event_queue = al_create_event_queue();

	//REGISTRO DE EVENTOS
	al_register_event_source(event_queue, al_get_timer_event_source(segundoTimer));
	al_register_event_source(event_queue, al_get_timer_event_source(FPS));
	al_register_event_source(event_queue, al_get_mouse_event_source());
	al_register_event_source(event_queue, al_get_keyboard_event_source());

	//START DE TYPES
	al_start_timer(segundoTimer);
	al_start_timer(FPS);


	menu_game();
	menu_game();

	al_destroy_display(ventana);

	return 0;
}

int menu_game() {
	bala.push_back((new BALASSS(500, 500)));
	bala.push_back((new BALASSS(500, 400)));
	Player P1(1, 300, 300, al_load_bitmap("assets/players/nave.bmp"));
	Player P2(2, 600, 600, al_load_bitmap("assets/players/nave.bmp"));
	WRdata WRDDDD;



	int aux = 0;
	string auxIP;
	int auxPORT = 0;
	cout << "SERVER - 1 o CLIENT - 2" << endl;
	cin >> aux;
	cin.ignore();

	if (aux == 1) {
		cout << "Esperando conexion..." << endl;
	}
	else if (aux == 2) {
		cout << "Ingresar IP del servidor: ";
		getline(cin, auxIP);
		cout << "Ingresar PORT del servidor: ";
		cin >> auxPORT;
	}
	else {
		cout << "Opcion invalida." << endl;
	}

	NetworkServer Server;
	NetworkClient Client(auxIP, auxPORT);


	Map Map0(0);


	bool salir = false;
	while (!salir) {

		al_clear_to_color(al_map_rgb(segundo * 10 % 255, segundo * 3 % 255, segundo * 7 % 255));


		Map0.display();

		if (aux == 1) {

			P1.move(teclado);
			P1.display();

			if (!Server.ConexionLost()) {
				Server.receiveData(P2.set_x());

				Server.sendData(P1.get_x());

				Server.receiveData(P2.set_y());

				Server.sendData(P1.get_y());

				P2.display();


			}
			else {
				Server.waitConnection();
			}


		}
		if (aux == 2) {
			P2.move(teclado);
			P2.display();

			if (!Client.ConexionLost()) {
				Client.sendData(P2.get_x());

				Client.receiveData(P1.set_x());

				Client.sendData(P2.get_y());

				Client.receiveData(P1.set_y());

				P1.display();

			}
			else {
				Client.searchConnection();
			}



		}



		al_wait_for_event(event_queue, &Evento);
		//bala1->mov(event_queue, Evento, segundoTimer);



		if (Evento.type == ALLEGRO_EVENT_TIMER) {
			if (Evento.timer.source == segundoTimer) {
				cout << "Coordenadas P1: " << P1.get_x() << ", " << P1.get_y() << endl;
				cout << "Coordenadas P2: " << P2.get_x() << ", " << P2.get_y() << endl;
				cout << endl;

				WRDDDD.Clear("players.txt");

				P1.SaveState();
				P2.SaveState();
			}
		}


		al_get_keyboard_state(&teclado);
		if (al_key_down(&teclado, ALLEGRO_KEY_SPACE)) CreateObj();
		else if (al_key_down(&teclado, ALLEGRO_KEY_ESCAPE)) salir = true;


		al_flip_display();
	}

	Server.~NetworkServer();
	Client.~NetworkClient();
	al_destroy_display(ventana);

	return 0;
}

void CreateObj() {
	bala.push_back((new BALASSS(500, 600)));
}
